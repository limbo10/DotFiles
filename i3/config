# Launch Application at startup
exec --no-startup-id variety
exec_always --no-startup-id $HOME/.config/polybar/launch.sh
exec_always --no-startup-id compton

# New configuration format for i3 (it should be commented)
#
# i3 config file (v4)

# set mod key (Mod1 -> Alt | Mod4 -> Super)
set $mod Mod4

#set font (font font_size)
font pango:Work Sans 10


# NetworkManager is the most popular way to manage wireless networks on Linux, and nm-applet is a desktop environment-independent system tray GUI for it.
exec --no-startup-id nm-applet

# Use pactl to adjust volume in PulseAudio.
set $refresh_i3status killall -SIGUSR1 i3status
bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ +10% && $refresh_i3status
bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-volume @DEFAULT_SINK@ -10% && $refresh_i3status
bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && $refresh_i3status
bindsym XF86AudioMicMute exec --no-startup-id pactl set-source-mute @DEFAULT_SOURCE@ toggle && $refresh_i3status

# Use Mouse+$mod to drag floating windows to their wanted position
floating_modifier $mod

# start a terminal 
bindsym $mod+Return exec --no-startup-id alacritty

# kill focused window
bindsym $mod+q kill

# start dmenu (a program launcher)
bindsym $mod+d exec rofi -show drun

# change focus
bindsym $mod+h focus left
bindsym $mod+j focus down
bindsym $mod+k focus up
bindsym $mod+l focus right

# alternatively, you can use the cursor keys:
bindsym $mod+Left focus left
bindsym $mod+Down focus down
bindsym $mod+Up focus up
bindsym $mod+Right focus right

# move focused window
bindsym $mod+Shift+h move left
bindsym $mod+Shift+j move down
bindsym $mod+Shift+k move up
bindsym $mod+Shift+l move right

# alternatively, you can use the cursor keys:
bindsym $mod+Shift+Left move left
bindsym $mod+Shift+Down move down
bindsym $mod+Shift+Up move up
bindsym $mod+Shift+Right move right

# split in horizontal orientation
bindsym $mod+u split h; exec --no-startup-id notify-send 'Tile Horizontally'

# split in vertical orientation
bindsym $mod+n split v; exec --no-startup-id notify-send 'Tile Vertically'

# enter fullscreen mode for the focused container
bindsym $mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
bindsym $mod+s layout stacking
bindsym $mod+w layout tabbed
bindsym $mod+e layout toggle split

# toggle tiling / floating
bindsym $mod+Shift+space floating toggle

# change focus between tiling / floating windows
bindsym $mod+space focus mode_toggle

# focus the parent container
bindsym $mod+a focus parent

#focus the child container
bindsym $mod+c focus child

# Define names for default workspaces for which we configure key bindings later on.
# We use variables to avoid repeating the names in multiple places.
set $ws1 1
set $ws2 2
set $ws3 3
set $ws4 4
set $ws5 5
set $ws6 6
set $ws7 7
set $ws8 8
set $ws9 9
set $ws10 10

# switch to workspace
bindsym $mod+1 workspace number $ws1
bindsym $mod+2 workspace number $ws2
bindsym $mod+3 workspace number $ws3
bindsym $mod+4 workspace number $ws4
bindsym $mod+5 workspace number $ws5
bindsym $mod+6 workspace number $ws6
bindsym $mod+7 workspace number $ws7
bindsym $mod+8 workspace number $ws8
bindsym $mod+9 workspace number $ws9
bindsym $mod+0 workspace number $ws10

# move focused container to workspace
bindsym $mod+Shift+1 move container to workspace number $ws1
bindsym $mod+Shift+2 move container to workspace number $ws2
bindsym $mod+Shift+3 move container to workspace number $ws3
bindsym $mod+Shift+4 move container to workspace number $ws4
bindsym $mod+Shift+5 move container to workspace number $ws5
bindsym $mod+Shift+6 move container to workspace number $ws6
bindsym $mod+Shift+7 move container to workspace number $ws7
bindsym $mod+Shift+8 move container to workspace number $ws8
bindsym $mod+Shift+9 move container to workspace number $ws9
bindsym $mod+Shift+0 move container to workspace number $ws10

# Move to workspace with focused container
bindsym $mod+Ctrl+1 move container to workspace $ws1; workspace $ws1
bindsym $mod+Ctrl+2 move container to workspace $ws2; workspace $ws2
bindsym $mod+Ctrl+3 move container to workspace $ws3; workspace $ws3
bindsym $mod+Ctrl+4 move container to workspace $ws4; workspace $ws4
bindsym $mod+Ctrl+5 move container to workspace $ws5; workspace $ws5
bindsym $mod+Ctrl+6 move container to workspace $ws6; workspace $ws6
bindsym $mod+Ctrl+7 move container to workspace $ws7; workspace $ws7
bindsym $mod+Ctrl+8 move container to workspace $ws8; workspace $ws8



# reload the configuration file
bindsym $mod+Shift+c reload
#
# restart i3 inplace
bindsym $mod+Shift+r restart

# exit i3 (logs you out of your X session)
bindsym $mod+Shift+e exec --no-startup-id "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"

# resize window
mode "resize" {
        bindsym h resize shrink width 1 px or 1 ppt
        bindsym j resize grow height 1 px or 1 ppt
        bindsym k resize shrink height 1 px or 1 ppt
        bindsym l resize grow width 1 px or 1 ppt

        # same bindings, but for the arrow keys
        bindsym Left resize shrink width 1 px or 1 ppt
        bindsym Down resize grow height 1 px or 1 ppt
        bindsym Up resize shrink height 1 px or 1 ppt
        bindsym Right resize grow width 1 px or 1 ppt

        # back to normal: Enter or Escape or $mod+r
        bindsym Return mode "default"
        bindsym Escape mode "default"
        bindsym $mod+r mode "default"
}
# resize mode
bindsym $mod+r mode "resize"

# i3 bar configuration
# bar {
#         status_command i3status
# }



# -------------------------------- Configuring i3 --------------------------------

# Constraining floating window size (width x height)
# -1 -> dimension will be unconstrained with respec to its maximum value
#  0 -> default value to constrain the size
floating_minimum_size 50 x 50
floating_maximum_size -1 x -1


# Window Title Alignment (left | center | right)
title_align center


# Border Styling (normal <x> | none | pixel <x>)
default_border none
default_floating_border normal


# Hiding Border Adjacement to the Screen Edge (none | vertical | horizontal | both | smart)
# hide_edge_borders none

# Launch at Startup
exec --no-startup-id alacritty
exec --no-startup-id firefox
# exec --no-startup-id spotify, move container to $ws3

# Fast Switching between active workspace (yes | no)
workspace_auto_back_and_forth yes

# swap container
# swap container with mark 

# Making Marks on container
bindsym $mod+m --no-startup-id exec i3-input -F 'makrs %s' -l 1 -P 'Mark: '
bindsym $mod+g --no-startup-id exec i3-input -F '[con_marks=%s] focus' -l 1 -P 'Goto: '

# Focus follow mouse
focus_follows_mouse no

# switch to workspace with urgent window automatically
for_window [urgent=latest] focus

#Set shut down, restart and locking features
bindsym $mod+z mode "$mode_system"
set $mode_system (l)ock, (e)xit, switch_(u)ser, (s)uspend, (h)ibernate, (r)eboot, (Shift+s)hutdown
mode "$mode_system" {
    bindsym l exec --no-startup-id i3exit lock, mode "default"
    bindsym s exec --no-startup-id i3exit suspend, mode "default"
    bindsym u exec --no-startup-id i3exit switch_user, mode "default"
    bindsym e exec --no-startup-id i3exit logout, mode "default"
    bindsym h exec --no-startup-id i3exit hibernate, mode "default"
    bindsym r exec --no-startup-id i3exit reboot, mode "default"
    bindsym Shift+s exec --no-startup-id i3exit shutdown, mode "default"

    # exit system mode: "Enter" or "Escape"
    bindsym Return mode "default"
    bindsym Escape mode "default"
}








# ---------------------------------------- Gaps ------------------------------------------------
set $inc 1
set $dec 1
set $z   0

gaps inner 2
gaps outer 0

set $mode_gaps Gaps: (o)uter, (i)nner, (h)orizontal, (v)ertical, (t)op, (r)ight, (b)ottom, (l)eft
set $mode_gaps_outer Outer Gaps: +|-|0 (local), Shift + +|-|0 (global)
set $mode_gaps_inner Inner Gaps: +|-|0 (local), Shift + +|-|0 (global)
set $mode_gaps_horiz Horizontal Gaps: +|-|0 (local), Shift + +|-|0 (global)
set $mode_gaps_verti Vertical Gaps: +|-|0 (local), Shift + +|-|0 (global)
set $mode_gaps_top Top Gaps: +|-|0 (local), Shift + +|-|0 (global)
set $mode_gaps_right Right Gaps: +|-|0 (local), Shift + +|-|0 (global)
set $mode_gaps_bottom Bottom Gaps: +|-|0 (local), Shift + +|-|0 (global)
set $mode_gaps_left Left Gaps: +|-|0 (local), Shift + +|-|0 (global)
bindsym $mod+Shift+g mode "$mode_gaps"

mode "$mode_gaps" {
        bindsym o      mode "$mode_gaps_outer"
        bindsym i      mode "$mode_gaps_inner"
        bindsym h      mode "$mode_gaps_horiz"
        bindsym v      mode "$mode_gaps_verti"
        bindsym t      mode "$mode_gaps_top"
        bindsym r      mode "$mode_gaps_right"
        bindsym b      mode "$mode_gaps_bottom"
        bindsym l      mode "$mode_gaps_left"
        bindsym Return mode "$mode_gaps"
        bindsym Escape mode "default"
}

mode "$mode_gaps_outer" {
        bindsym plus  gaps outer current plus $inc
        bindsym minus gaps outer current minus $dec
        bindsym 0     gaps outer current set $z

        bindsym Shift+plus  gaps outer all plus $inc
        bindsym Shift+minus gaps outer all minus $dec
        bindsym Shift+0     gaps outer all set $z

        bindsym Return mode "$mode_gaps"
        bindsym Escape mode "default"
}
mode "$mode_gaps_inner" {
        bindsym plus  gaps inner current plus $inc
        bindsym minus gaps inner current minus $dec
        bindsym 0     gaps inner current set $z

        bindsym Shift+plus  gaps inner all plus $inc
        bindsym Shift+minus gaps inner all minus $dec
        bindsym Shift+0     gaps inner all set $z

        bindsym Return mode "$mode_gaps"
        bindsym Escape mode "default"
}
mode "$mode_gaps_horiz" {
        bindsym plus  gaps horizontal current plus $inc
        bindsym minus gaps horizontal current minus $dec
        bindsym 0     gaps horizontal current set $z

        bindsym Shift+plus  gaps horizontal all plus $inc
        bindsym Shift+minus gaps horizontal all minus $dec
        bindsym Shift+0     gaps horizontal all set $z

        bindsym Return mode "$mode_gaps"
        bindsym Escape mode "default"
}
mode "$mode_gaps_verti" {
        bindsym plus  gaps vertical current plus $inc
        bindsym minus gaps vertical current minus $dec
        bindsym 0     gaps vertical current set $z

        bindsym Shift+plus  gaps vertical all plus $inc
        bindsym Shift+minus gaps vertical all minus $dec
        bindsym Shift+0     gaps vertical all set $z

        bindsym Return mode "$mode_gaps"
        bindsym Escape mode "default"
}
mode "$mode_gaps_top" {
        bindsym plus  gaps top current plus $inc
        bindsym minus gaps top current minus $dec
        bindsym 0     gaps top current set $z

        bindsym Shift+plus  gaps top all plus $inc
        bindsym Shift+minus gaps top all minus $dec
        bindsym Shift+0     gaps top all set $z

        bindsym Return mode "$mode_gaps"
        bindsym Escape mode "default"
}
mode "$mode_gaps_right" {
        bindsym plus  gaps right current plus $inc
        bindsym minus gaps right current minus $dec
        bindsym 0     gaps right current set $z

        bindsym Shift+plus  gaps right all plus $inc
        bindsym Shift+minus gaps right all minus $dec
        bindsym Shift+0     gaps right all set $z

        bindsym Return mode "$mode_gaps"
        bindsym Escape mode "default"
}
mode "$mode_gaps_bottom" {
        bindsym plus  gaps bottom current plus $inc
        bindsym minus gaps bottom current minus $dec
        bindsym 0     gaps bottom current set $z

        bindsym Shift+plus  gaps bottom all plus $inc
        bindsym Shift+minus gaps bottom all minus $dec
        bindsym Shift+0     gaps bottom all set $z

        bindsym Return mode "$mode_gaps"
        bindsym Escape mode "default"
}
mode "$mode_gaps_left" {
        bindsym plus  gaps left current plus $inc
        bindsym minus gaps left current minus $dec
        bindsym 0     gaps left current set $z

        bindsym Shift+plus  gaps left all plus $inc
        bindsym Shift+minus gaps left all minus $dec
        bindsym Shift+0     gaps left all set $z

        bindsym Return mode "$mode_gaps"
        bindsym Escape mode "default"
}





